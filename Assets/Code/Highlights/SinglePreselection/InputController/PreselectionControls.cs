//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Code/Highlights/CameraInputSystem/InputController/PreselectionControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PreselectionControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PreselectionControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PreselectionControls"",
    ""maps"": [
        {
            ""name"": ""PreselectionAction"",
            ""id"": ""b6c3b641-2ed8-43c8-a4cb-ff9c9507b129"",
            ""actions"": [
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""c74b5a92-f652-479d-8f2b-bfafd9abba49"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftMouseClickAndMove"",
                    ""type"": ""Value"",
                    ""id"": ""d25eab3d-5d44-4473-bc7d-64e81719dbad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a66665ef-abe5-4cc6-b9d1-483097f4388b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""StartPosition"",
                    ""id"": ""6cf3c961-09fe-4bfe-808a-301106c6fe89"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouseClickAndMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""40a25394-3aa1-4dbe-af64-0e3a10b183f8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouseClickAndMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f4cd6219-4f62-417b-a1f9-a6150c453e24"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouseClickAndMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PreselectionAction
        m_PreselectionAction = asset.FindActionMap("PreselectionAction", throwIfNotFound: true);
        m_PreselectionAction_MouseMove = m_PreselectionAction.FindAction("MouseMove", throwIfNotFound: true);
        m_PreselectionAction_LeftMouseClickAndMove = m_PreselectionAction.FindAction("LeftMouseClickAndMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PreselectionAction
    private readonly InputActionMap m_PreselectionAction;
    private IPreselectionActionActions m_PreselectionActionActionsCallbackInterface;
    private readonly InputAction m_PreselectionAction_MouseMove;
    private readonly InputAction m_PreselectionAction_LeftMouseClickAndMove;
    public struct PreselectionActionActions
    {
        private @PreselectionControls m_Wrapper;
        public PreselectionActionActions(@PreselectionControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMove => m_Wrapper.m_PreselectionAction_MouseMove;
        public InputAction @LeftMouseClickAndMove => m_Wrapper.m_PreselectionAction_LeftMouseClickAndMove;
        public InputActionMap Get() { return m_Wrapper.m_PreselectionAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PreselectionActionActions set) { return set.Get(); }
        public void SetCallbacks(IPreselectionActionActions instance)
        {
            if (m_Wrapper.m_PreselectionActionActionsCallbackInterface != null)
            {
                @MouseMove.started -= m_Wrapper.m_PreselectionActionActionsCallbackInterface.OnMouseMove;
                @MouseMove.performed -= m_Wrapper.m_PreselectionActionActionsCallbackInterface.OnMouseMove;
                @MouseMove.canceled -= m_Wrapper.m_PreselectionActionActionsCallbackInterface.OnMouseMove;
                @LeftMouseClickAndMove.started -= m_Wrapper.m_PreselectionActionActionsCallbackInterface.OnLeftMouseClickAndMove;
                @LeftMouseClickAndMove.performed -= m_Wrapper.m_PreselectionActionActionsCallbackInterface.OnLeftMouseClickAndMove;
                @LeftMouseClickAndMove.canceled -= m_Wrapper.m_PreselectionActionActionsCallbackInterface.OnLeftMouseClickAndMove;
            }
            m_Wrapper.m_PreselectionActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
                @LeftMouseClickAndMove.started += instance.OnLeftMouseClickAndMove;
                @LeftMouseClickAndMove.performed += instance.OnLeftMouseClickAndMove;
                @LeftMouseClickAndMove.canceled += instance.OnLeftMouseClickAndMove;
            }
        }
    }
    public PreselectionActionActions @PreselectionAction => new PreselectionActionActions(this);
    public interface IPreselectionActionActions
    {
        void OnMouseMove(InputAction.CallbackContext context);
        void OnLeftMouseClickAndMove(InputAction.CallbackContext context);
    }
}
